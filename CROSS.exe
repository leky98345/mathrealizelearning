import sys
import os
import urllib.request
from PyQt5 import QtCore, QtGui, QtWidgets

# === Current app version ===
CURRENT_VERSION = "1.0.0"

# === Stylesheets (exactly as you had them) ===
dark_stylesheet = """
QWidget {
    background-color: #121417;
    color: #cfd4db;
    font-family: "Segoe UI";
}
QListWidget {
    background-color: #1e2532;
    border: none;
    color: #cfd4db;
    font-size: 13pt;
}
QListWidget::item {
    height: 50px;
    padding-left: 10px;
}
QListWidget::item:selected {
    background-color: #5061a3;
    color: #cfd4db;
}
QStackedWidget {
    background-color: #1e2532;
    border: none;
}
QLabel {
    color: #cfd4db;
}
QLineEdit, QSpinBox {
    background-color: #121417;
    border: 1px solid #5061a3;
    color: #cfd4db;
    padding: 5px;
    font-size: 12pt;
    border-radius: 4px;
}
QPushButton {
    background-color: #5061a3;
    border: none;
    padding: 8px;
    border-radius: 6px;
    font-weight: bold;
    color: #cfd4db;
}
QPushButton:hover {
    background-color: #6378d1;
}
QCheckBox {
    spacing: 10px;
    font-size: 12pt;
}
QCheckBox::indicator {
    width: 18px;
    height: 18px;
}
"""

light_stylesheet = """
QWidget {
    background-color: white;
    color: black;
    font-family: "Segoe UI";
}
QListWidget {
    background-color: white;
    border: none;
    color: black;
    font-size: 13pt;
}
QListWidget::item {
    height: 50px;
    padding-left: 10px;
}
QListWidget::item:selected {
    background-color: #5061a3;
    color: white;
}
QStackedWidget {
    background-color: white;
    border: none;
}
QLabel {
    color: black;
}
QLineEdit, QSpinBox {
    background-color: white;
    border: 1px solid #5061a3;
    color: black;
    padding: 5px;
    font-size: 12pt;
    border-radius: 4px;
}
QPushButton {
    background-color: #5061a3;
    border: none;
    padding: 8px;
    border-radius: 6px;
    font-weight: bold;
    color: white;
}
QPushButton:hover {
    background-color: #6378d1;
}
QCheckBox {
    spacing: 10px;
    font-size: 12pt;
}
QCheckBox::indicator {
    width: 18px;
    height: 18px;
}
"""

# === TitleBar (your original) ===
class TitleBar(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setFixedHeight(40)
        self.startPos = None
        self.clickPos = None
        self.setAutoFillBackground(True)

        palette = self.palette()
        palette.setColor(self.backgroundRole(), QtGui.QColor("#1e2532"))
        self.setPalette(palette)

        layout = QtWidgets.QHBoxLayout(self)
        layout.setContentsMargins(8, 0, 8, 0)
        layout.setSpacing(8)

        self.logo = QtWidgets.QLabel()
        pixmap = QtGui.QPixmap()
        try:
            # Load logo image from web
            pixmap.loadFromData(urllib.request.urlopen("https://mathrealize.web.app/logo.png").read())
        except Exception:
            pass
        self.logo.setPixmap(pixmap.scaled(28, 28, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        layout.addWidget(self.logo)

        self.title = QtWidgets.QLabel("CROSS")
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.title.setFont(font)
        layout.addWidget(self.title)

        layout.addStretch()

        self.btn_minimize = QtWidgets.QPushButton("-")
        self.btn_minimize.setFixedSize(32, 28)
        self.btn_minimize.setToolTip("Minimize")
        self.btn_minimize.setStyleSheet("""
            QPushButton {
                background-color: #2a2f45;
                border: none;
                color: #cfd4db;
                font-weight: bold;
                font-size: 18pt;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #5061a3;
            }
        """)
        self.btn_minimize.clicked.connect(self.parent.showMinimized)
        layout.addWidget(self.btn_minimize)

        self.btn_close = QtWidgets.QPushButton("Ã—")
        self.btn_close.setFixedSize(32, 28)
        self.btn_close.setToolTip("Close")
        self.btn_close.setStyleSheet("""
            QPushButton {
                background-color: #2a2f45;
                border: none;
                color: #cfd4db;
                font-weight: bold;
                font-size: 18pt;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #a33;
            }
        """)
        self.btn_close.clicked.connect(self.parent.close)
        layout.addWidget(self.btn_close)

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.startPos = event.globalPos()
            self.clickPos = event.pos()
            event.accept()

    def mouseMoveEvent(self, event):
        if self.startPos:
            self.parent.move(event.globalPos() - self.clickPos)
            event.accept()

    def mouseReleaseEvent(self, event):
        self.startPos = None
        self.clickPos = None
        event.accept()

# === ProxySection (your original) ===
class ProxySection(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        layout = QtWidgets.QFormLayout()
        layout.setLabelAlignment(QtCore.Qt.AlignLeft)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        self.proxy_ip = QtWidgets.QLineEdit()
        self.proxy_port = QtWidgets.QSpinBox()
        self.proxy_port.setRange(1, 65535)
        self.proxy_user = QtWidgets.QLineEdit()
        self.proxy_pass = QtWidgets.QLineEdit()
        self.proxy_pass.setEchoMode(QtWidgets.QLineEdit.Password)

        layout.addRow("Proxy IP:", self.proxy_ip)
        layout.addRow("Port:", self.proxy_port)
        layout.addRow("Username:", self.proxy_user)
        layout.addRow("Password:", self.proxy_pass)

        btn_layout = QtWidgets.QHBoxLayout()
        self.connect_btn = QtWidgets.QPushButton("Connect")
        self.disconnect_btn = QtWidgets.QPushButton("Disconnect")
        btn_layout.addWidget(self.connect_btn)
        btn_layout.addWidget(self.disconnect_btn)
        layout.addRow(btn_layout)

        self.setLayout(layout)

        self.connect_btn.clicked.connect(self.connect_proxy)
        self.disconnect_btn.clicked.connect(self.disconnect_proxy)

    def connect_proxy(self):
        ip = self.proxy_ip.text().strip()
        port = self.proxy_port.value()
        user = self.proxy_user.text().strip()
        password = self.proxy_pass.text().strip()

        if not ip:
            QtWidgets.QMessageBox.warning(self, "Error", "Please enter Proxy IP.")
            return

        if user and password:
            proxy_url = f"http://{user}:{password}@{ip}:{port}"
        else:
            proxy_url = f"http://{ip}:{port}"

        os.environ['http_proxy'] = proxy_url
        os.environ['https_proxy'] = proxy_url

        QtWidgets.QMessageBox.information(self, "Proxy", "Proxy connected.")

    def disconnect_proxy(self):
        os.environ.pop('http_proxy', None)
        os.environ.pop('https_proxy', None)
        QtWidgets.QMessageBox.information(self, "Proxy", "Proxy disconnected.")

# === DownloadSection (your original) ===
class DownloadSection(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        layout = QtWidgets.QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        self.btn_chromium = QtWidgets.QPushButton("Download Ungoogled Chromium")
        self.btn_sliders = QtWidgets.QPushButton("Download SLIDERS")
        self.btn_nothing = QtWidgets.QPushButton("Nothing here yet")

        layout.addWidget(self.btn_chromium)
        layout.addWidget(self.btn_sliders)
        layout.addWidget(self.btn_nothing)
        layout.addStretch()

        self.setLayout(layout)

        self.btn_chromium.clicked.connect(lambda: self.download_file("https://mathrealize.web.app/Tclient/Tclient.zip"))
        self.btn_sliders.clicked.connect(lambda: self.download_file("https://mathrealize.web.app/SLIDERS/Sliders.zip"))

    def download_file(self, url):
        filename = url.split("/")[-1]
        downloads_folder = os.path.join(os.path.expanduser("~"), "Downloads")
        path = os.path.join(downloads_folder, filename)

        try:
            urllib.request.urlretrieve(url, path)
            QtWidgets.QMessageBox.information(self, "Download", f"Downloaded {filename} to Downloads folder.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Download Failed", str(e))

# === ClockSection (your original) ===
class ClockSection(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.is_24h = False

        layout = QtWidgets.QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        self.clock_label = QtWidgets.QLabel()
        font = QtGui.QFont("Segoe UI", 32, QtGui.QFont.Bold)
        self.clock_label.setFont(font)
        self.clock_label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(self.clock_label)

        layout.addStretch()

        self.setLayout(layout)

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
        self.update_time()

    def update_time(self):
        from datetime import datetime
        now = datetime.now()
        if self.is_24h:
            current_time = now.strftime("%H:%M:%S")
        else:
            current_time = now.strftime("%I:%M:%S %p")
        self.clock_label.setText(current_time)

    def set_24h_mode(self, enabled):
        self.is_24h = enabled
        self.update_time()

# === SettingsSection (updated with update check) ===
class SettingsSection(QtWidgets.QWidget):
    def __init__(self, clock_section, main_window):
        super().__init__()
        self.clock_section = clock_section
        self.main_window = main_window
        self.is_startup_enabled = False

        layout = QtWidgets.QFormLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        self.chk_24h = QtWidgets.QCheckBox("Use 24-hour (Military) Time")
        self.chk_24h.stateChanged.connect(self.on_24h_toggle)
        layout.addRow(self.chk_24h)

        self.chk_light_theme = QtWidgets.QCheckBox("Use Light Theme")
        self.chk_light_theme.stateChanged.connect(self.toggle_theme)
        layout.addRow(self.chk_light_theme)

        self.chk_launch_startup = QtWidgets.QCheckBox("Launch on Startup")
        self.chk_launch_startup.stateChanged.connect(self.toggle_launch_startup)
        layout.addRow(self.chk_launch_startup)

        self.btn_check_update = QtWidgets.QPushButton("Check for Updates")
        self.btn_check_update.clicked.connect(self.check_for_updates)
        layout.addRow(self.btn_check_update)

        self.setLayout(layout)

    def on_24h_toggle(self, state):
        self.clock_section.set_24h_mode(state == QtCore.Qt.Checked)

    def toggle_theme(self, state):
        app = QtWidgets.QApplication.instance()
        if state == QtCore.Qt.Checked:
            app.setStyleSheet(light_stylesheet)
        else:
            app.setStyleSheet(dark_stylesheet)

    def toggle_launch_startup(self, state):
        self.is_startup_enabled = (state == QtCore.Qt.Checked)
        state_str = "enabled" if self.is_startup_enabled else "disabled"
        QtWidgets.QMessageBox.information(self, "Launch on Startup", f"Launch on startup {state_str} (dummy).")

    def check_for_updates(self):
        self.main_window.check_for_updates()

# === MainWindow with version label and update check logic ===
class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("CROSS")
        self.resize(600, 400)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QtWidgets.QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)

        self.title_bar = TitleBar(self)
        main_layout.addWidget(self.title_bar)

        content_layout = QtWidgets.QHBoxLayout()
        main_layout.addLayout(content_layout)

        self.list_widget = QtWidgets.QListWidget()
        self.list_widget.addItems(["Proxy", "Downloads", "Clock", "Settings"])
        self.list_widget.setFixedWidth(160)
        content_layout.addWidget(self.list_widget)

        self.stack = QtWidgets.QStackedWidget()
        content_layout.addWidget(self.stack)

        self.proxy_section = ProxySection()
        self.download_section = DownloadSection()
        self.clock_section = ClockSection()
        self.settings_section = SettingsSection(self.clock_section, self)

        self.stack.addWidget(self.proxy_section)
        self.stack.addWidget(self.download_section)
        self.stack.addWidget(self.clock_section)
        self.stack.addWidget(self.settings_section)

        self.list_widget.currentRowChanged.connect(self.stack.setCurrentIndex)
        self.list_widget.setCurrentRow(0)

        # Version label bottom right
        self.version_label = QtWidgets.QLabel(f"Version {CURRENT_VERSION}")
        self.version_label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.version_label.setStyleSheet("padding: 4px 10px; color: #888; font-size: 10pt;")
        main_layout.addWidget(self.version_label)

    def check_for_updates(self):
        url = "https://raw.githubusercontent.com/leky98345/mathrealizelearning/refs/heads/main/version.txt"  # CHANGE THIS
        try:
            with urllib.request.urlopen(url, timeout=5) as response:
                remote_version = response.read().decode().strip()
                if remote_version != CURRENT_VERSION:
                    msg = QtWidgets.QMessageBox(self)
                    msg.setIcon(QtWidgets.QMessageBox.Information)
                    msg.setWindowTitle("Update Available")
                    msg.setText(f"A new version is available:\n\nCurrent: {CURRENT_VERSION}\nLatest: {remote_version}")
                    msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Open)
                    msg.button(QtWidgets.QMessageBox.Open).setText("Download Update")
                    result = msg.exec_()
                    if result == QtWidgets.QMessageBox.Open:
                        QtGui.QDesktopServices.openUrl(QtCore.QUrl("https://github.com/yourusername/yourrepo/releases"))  # CHANGE THIS
                else:
                    QtWidgets.QMessageBox.information(self, "Up to Date", "You're using the latest version.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Update Check Failed", f"Could not check for updates.\n{e}")

def main():
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(dark_stylesheet)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
